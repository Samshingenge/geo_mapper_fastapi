{"ast":null,"code":"var _jsxFileName = \"/home/sammycode/Documents/nam_geo_cov_mapper/frontend/src/components/MapComponent.tsx\";\n// import React, { useEffect, useState } from 'react';\n// import { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\n// import 'leaflet/dist/leaflet.css';\n// import { RegionFeature, RegionFeatureCollection } from '../services/api';\n// import { fetchRegions } from '../services/api';\n\n// // Fix for default marker icons in React Leaflet\n// import L from 'leaflet';\n// import markerIcon from 'leaflet/dist/images/marker-icon.png';\n// import markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png';\n// import markerShadow from 'leaflet/dist/images/marker-shadow.png';\n\n// // @ts-ignore\n// delete L.Icon.Default.prototype._getIconUrl;\n// L.Icon.Default.mergeOptions({\n//   iconUrl: markerIcon,\n//   iconRetinaUrl: markerIcon2x,\n//   shadowUrl: markerShadow,\n// });\n\n// const MapComponent: React.FC = () => {\n// //   const [regions, setRegions] = useState<RegionFeatureCollection | null>(null);\n// //   const [loading, setLoading] = useState<boolean>(true);\n// //   const [error, setError] = useState<string | null>(null);\n\n// //   useEffect(() => {\n// //     const loadRegions = async () => {\n// //       try {\n// //         const data = await fetchRegions();\n// //         setRegions(data);\n// //       } catch (err) {\n// //         console.error('Failed to fetch regions:', err);\n// //         setError('Failed to load regions data');\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     loadRegions();\n// //   }, []);\n\n//   // Style function for the GeoJSON features\n//   const getStyle = (feature: any) => {\n//     if (!feature) return {};\n\n//     const status = feature.properties?.fiber_status?.toLowerCase();\n//     let fillColor = '#808080'; // Default gray\n\n//     if (status === 'active') {\n//       fillColor = '#4CAF50'; // Green\n//     } else if (status === 'planned') {\n//       fillColor = '#FFC107'; // Yellow\n//     } else if (status === 'unavailable') {\n//       fillColor = '#F44336'; // Red\n//     }\n\n//     return {\n//       fillColor,\n//       weight: 2,\n//       opacity: 1,\n//       color: 'white',\n//       dashArray: '3',\n//       fillOpacity: 0.7\n//     };\n//   };\n\n//   // Handle click on a region\n//   const onEachFeature = (feature: any, layer: any) => {\n//     if (feature.properties) {\n//       const { name, fiber_status, area_km2, population } = feature.properties;\n//       const popupContent = `\n//         <div>\n//           <h3>${name}</h3>\n//           <p>Status: ${fiber_status}</p>\n//           ${area_km2 ? `<p>Area: ${area_km2.toLocaleString()} km²</p>` : ''}\n//           ${population ? `<p>Population: ${population.toLocaleString()}</p>` : ''}\n//         </div>\n//       `;\n//       layer.bindPopup(popupContent);\n//     }\n//   };\n\n// //   if (loading) return <div className=\"loading\">Loading map...</div>;\n// //   if (error) return <div className=\"error\">{error}</div>;\n\n//   return (\n//     <div className=\"map-container\" style={{ height: '80vh', width: '100%' }}>\n//       <MapContainer \n//         center={[-22, 17]} \n//         zoom={6} \n//         style={{ height: '100%', width: '100%' }}\n//       >\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//           attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//         />\n//         {/* {regions?.features.map((feature, index) => (\n//           <GeoJSON\n//             key={`${feature.id}-${index}`}\n//             data={feature as any}\n//             style={getStyle(feature)}\n//             onEachFeature={onEachFeature}\n//           />\n//         ))} */}\n//       </MapContainer>\n//     </div>\n//   );\n// };\n\n// export default MapComponent;\n\n// frontend/src/components/MapComponent.tsx\n\nimport React from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// ... (keep the L icon fix) ...\n\n// Define the props the component will receive\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = ({\n  regions,\n  getRegionStyle,\n  handleRegionClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [-22, 17],\n    zoom: 6,\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: regions,\n      style: getRegionStyle,\n      eventHandlers: {\n        click: handleRegionClick\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","MapContainer","TileLayer","GeoJSON","jsxDEV","_jsxDEV","MapComponent","regions","getRegionStyle","handleRegionClick","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","data","eventHandlers","click","_c","$RefreshReg$"],"sources":["/home/sammycode/Documents/nam_geo_cov_mapper/frontend/src/components/MapComponent.tsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\n// import 'leaflet/dist/leaflet.css';\n// import { RegionFeature, RegionFeatureCollection } from '../services/api';\n// import { fetchRegions } from '../services/api';\n\n// // Fix for default marker icons in React Leaflet\n// import L from 'leaflet';\n// import markerIcon from 'leaflet/dist/images/marker-icon.png';\n// import markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png';\n// import markerShadow from 'leaflet/dist/images/marker-shadow.png';\n\n// // @ts-ignore\n// delete L.Icon.Default.prototype._getIconUrl;\n// L.Icon.Default.mergeOptions({\n//   iconUrl: markerIcon,\n//   iconRetinaUrl: markerIcon2x,\n//   shadowUrl: markerShadow,\n// });\n\n// const MapComponent: React.FC = () => {\n// //   const [regions, setRegions] = useState<RegionFeatureCollection | null>(null);\n// //   const [loading, setLoading] = useState<boolean>(true);\n// //   const [error, setError] = useState<string | null>(null);\n\n// //   useEffect(() => {\n// //     const loadRegions = async () => {\n// //       try {\n// //         const data = await fetchRegions();\n// //         setRegions(data);\n// //       } catch (err) {\n// //         console.error('Failed to fetch regions:', err);\n// //         setError('Failed to load regions data');\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     loadRegions();\n// //   }, []);\n\n//   // Style function for the GeoJSON features\n//   const getStyle = (feature: any) => {\n//     if (!feature) return {};\n    \n//     const status = feature.properties?.fiber_status?.toLowerCase();\n//     let fillColor = '#808080'; // Default gray\n    \n//     if (status === 'active') {\n//       fillColor = '#4CAF50'; // Green\n//     } else if (status === 'planned') {\n//       fillColor = '#FFC107'; // Yellow\n//     } else if (status === 'unavailable') {\n//       fillColor = '#F44336'; // Red\n//     }\n\n//     return {\n//       fillColor,\n//       weight: 2,\n//       opacity: 1,\n//       color: 'white',\n//       dashArray: '3',\n//       fillOpacity: 0.7\n//     };\n//   };\n\n//   // Handle click on a region\n//   const onEachFeature = (feature: any, layer: any) => {\n//     if (feature.properties) {\n//       const { name, fiber_status, area_km2, population } = feature.properties;\n//       const popupContent = `\n//         <div>\n//           <h3>${name}</h3>\n//           <p>Status: ${fiber_status}</p>\n//           ${area_km2 ? `<p>Area: ${area_km2.toLocaleString()} km²</p>` : ''}\n//           ${population ? `<p>Population: ${population.toLocaleString()}</p>` : ''}\n//         </div>\n//       `;\n//       layer.bindPopup(popupContent);\n//     }\n//   };\n\n// //   if (loading) return <div className=\"loading\">Loading map...</div>;\n// //   if (error) return <div className=\"error\">{error}</div>;\n\n//   return (\n//     <div className=\"map-container\" style={{ height: '80vh', width: '100%' }}>\n//       <MapContainer \n//         center={[-22, 17]} \n//         zoom={6} \n//         style={{ height: '100%', width: '100%' }}\n//       >\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//           attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//         />\n//         {/* {regions?.features.map((feature, index) => (\n//           <GeoJSON\n//             key={`${feature.id}-${index}`}\n//             data={feature as any}\n//             style={getStyle(feature)}\n//             onEachFeature={onEachFeature}\n//           />\n//         ))} */}\n//       </MapContainer>\n//     </div>\n//   );\n// };\n\n// export default MapComponent;\n\n// frontend/src/components/MapComponent.tsx\n\nimport React from 'react';\nimport { MapContainer, TileLayer, GeoJSON, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n// ... (keep the L icon fix) ...\n\n// Define the props the component will receive\ninterface MapComponentProps {\n  regions: any[]; // Or your more specific GeoJSONFeature[] type\n  getRegionStyle: (feature: any) => object;\n  handleRegionClick: (e: L.LeafletEvent) => void;\n}\n\nconst MapComponent: React.FC<MapComponentProps> = ({ regions, getRegionStyle, handleRegionClick }) => {\n  return (\n    <MapContainer center={[-22, 17]} zoom={6} style={{ height: '100%', width: '100%' }}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      <GeoJSON\n        data={regions as any}\n        style={getRegionStyle}\n        eventHandlers={{\n          click: handleRegionClick,\n        }}\n      />\n    </MapContainer>\n  );\n};\n\nexport default MapComponent;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,SAAS,EAAEC,OAAO,QAAe,eAAe;AACvE,OAAO,0BAA0B;;AAEjC;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,YAAyC,GAAGA,CAAC;EAAEC,OAAO;EAAEC,cAAc;EAAEC;AAAkB,CAAC,KAAK;EACpG,oBACEJ,OAAA,CAACJ,YAAY;IAACS,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAE;IAACC,IAAI,EAAE,CAAE;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACjFV,OAAA,CAACH,SAAS;MACRc,GAAG,EAAC,oDAAoD;MACxDC,WAAW,EAAC;IAAyF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtG,CAAC,eACFhB,OAAA,CAACF,OAAO;MACNmB,IAAI,EAAEf,OAAe;MACrBK,KAAK,EAAEJ,cAAe;MACtBe,aAAa,EAAE;QACbC,KAAK,EAAEf;MACT;IAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEnB,CAAC;AAACI,EAAA,GAhBInB,YAAyC;AAkB/C,eAAeA,YAAY;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}